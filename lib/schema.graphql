"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of ChangeCoverImage"""
input ChangeCoverImageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  image: Upload
}

"""Autogenerated input type of ChangeProfileImage"""
input ChangeProfileImageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  image: Upload
}

type Comment {
  comments: [Comment!]!
  createdAt: String!
  id: ID!
  post: Post!
  text: String!
  user: User!
}

"""Autogenerated input type of CreatePost"""
input CreatePostInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  text: String
  image: Upload
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

type Message {
  createdAt: String!
  id: ID!
  room: Room!
  text: String!
  user: User!
}

"""The connection type for Message."""
type MessageConnection {
  """A list of edges."""
  edges: [MessageEdge]

  """A list of nodes."""
  nodes: [Message]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MessageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Message
}

type Mutation {
  changeCoverImage(
    """Parameters for ChangeCoverImage"""
    input: ChangeCoverImageInput!
  ): User
  changeProfileImage(
    """Parameters for ChangeProfileImage"""
    input: ChangeProfileImageInput!
  ): User
  createComment(text: String, postId: ID!, parentId: ID): Comment
  createMessage(text: String!, roomId: ID!): Message
  createPost(
    """Parameters for CreatePost"""
    input: CreatePostInput!
  ): Post
  deletePost(id: ID!): Boolean
  likePost(postId: ID!): Post
  saveBookmark(postId: ID!): Boolean
  saveCloudMessageToken(token: String!): SaveCloudMessageTokenPayload

  """Change price of subscription"""
  stripeChangePrice(price: Int!): Boolean
  unlikePost(postId: ID!): Post
  unsaveBookmark(postId: ID!): Boolean
  uploadPhotoCover(
    """Parameters for UploadPhotoCover"""
    input: UploadPhotoCoverInput!
  ): User
  uploadPhotoProfile(
    """Parameters for UploadPhotoProfile"""
    input: UploadPhotoProfileInput!
  ): User
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLoginWithFacebook(token: String!): UserLoginWithFacebookPayload
  userLogout: UserLogoutPayload
  userRegister(email: String!, password: String!, passwordConfirmation: String!, confirmUrl: String, nickname: String!): UserRegisterPayload
  userResendConfirmationWithToken(email: String!, confirmUrl: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PaymentSheet {
  customer: String!
  ephemeralKey: String!
  paymentIntent: String!
  publishableKey: String!
}

type Post {
  blurhash: String
  comments: [Comment!]!
  commentsCount: Int!
  createdAt: String!
  id: ID!
  image: String
  isBookmarked: Boolean!
  isFollowing: Boolean!
  isMine: Boolean!
  likedByCurrentUser: Boolean!
  likesCount: Int!
  miniThumb: String
  text: String
  user: User!
}

"""The connection type for Post."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]

  """A list of nodes."""
  nodes: [Post]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Post
}

type Query {
  """The current user's bookmark"""
  bookmark(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
  chatRoom(id: ID!): Room!
  chatRooms: [Room!]!

  """The discovery posts"""
  discovery(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """The current user"""
  me: User!

  """Get a post"""
  post(postId: ID!): Post!

  """The current user's posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    userId: ID!
  ): PostConnection!

  """Search users"""
  searchUsers(query: String!): [User!]!

  """The current user's Stripe link"""
  stripeOnboardingUrl: String!

  """The current user's Stripe link"""
  stripePaymentSheet(userId: ID!): PaymentSheet!

  """The current user's timeline"""
  timeline(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Get a user"""
  user(userId: ID!): User!
}

type Room {
  id: ID!
  lastMessage: Message

  """The chat room's messages"""
  messages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MessageConnection!
  users: [User!]!
}

"""Autogenerated return type of SaveCloudMessageToken."""
type SaveCloudMessageTokenPayload {
  success: Boolean!
}

type Subscription {
  chatRoom(id: ID!): Room!
  chatRooms: [Room!]!

  """The current user"""
  me: User!
}

scalar Upload

"""Autogenerated input type of UploadPhotoCover"""
input UploadPhotoCoverInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  image: Upload!
}

"""Autogenerated input type of UploadPhotoProfile"""
input UploadPhotoProfileInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  image: Upload!
}

type User {
  email: String!
  followCount: Int
  followedByMe: Boolean
  followersCount: Int
  id: ID!
  name: String
  nickname: String
  photoCover: String
  photoCoverBlurhash: String
  photoProfile: String
  photoProfileBlurhash: String
  postsCount: Int
  stripeAccountVerify: Boolean
  stripePriceAmout: String
}

"""Autogenerated return type of UserConfirmRegistrationWithToken."""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

"""Autogenerated return type of UserLogin."""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""Autogenerated return type of UserLoginWithFacebook."""
type UserLoginWithFacebookPayload {
  credentials: Credential!
}

"""Autogenerated return type of UserLogout."""
type UserLogoutPayload {
  authenticatable: User!
}

"""Autogenerated return type of UserRegister."""
type UserRegisterPayload {
  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""Autogenerated return type of UserResendConfirmationWithToken."""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

"""Autogenerated return type of UserSendPasswordResetWithToken."""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""Autogenerated return type of UserUpdatePasswordWithToken."""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

